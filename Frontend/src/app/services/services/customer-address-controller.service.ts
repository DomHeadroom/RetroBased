/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addCustomerAddress } from '../fn/customer-address-controller/add-customer-address';
import { AddCustomerAddress$Params } from '../fn/customer-address-controller/add-customer-address';
import { getCustomerAddresses } from '../fn/customer-address-controller/get-customer-addresses';
import { GetCustomerAddresses$Params } from '../fn/customer-address-controller/get-customer-addresses';
import { removeCustomerAddress } from '../fn/customer-address-controller/remove-customer-address';
import { RemoveCustomerAddress$Params } from '../fn/customer-address-controller/remove-customer-address';

@Injectable({ providedIn: 'root' })
export class CustomerAddressControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCustomerAddresses()` */
  static readonly GetCustomerAddressesPath = '/user/addresses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCustomerAddresses()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCustomerAddresses$Response(params?: GetCustomerAddresses$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getCustomerAddresses(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCustomerAddresses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCustomerAddresses(params?: GetCustomerAddresses$Params, context?: HttpContext): Observable<{
}> {
    return this.getCustomerAddresses$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `addCustomerAddress()` */
  static readonly AddCustomerAddressPath = '/user/addresses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCustomerAddress()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCustomerAddress$Response(params: AddCustomerAddress$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addCustomerAddress(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCustomerAddress$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCustomerAddress(params: AddCustomerAddress$Params, context?: HttpContext): Observable<{
}> {
    return this.addCustomerAddress$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `removeCustomerAddress()` */
  static readonly RemoveCustomerAddressPath = '/user/addresses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeCustomerAddress()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeCustomerAddress$Response(params: RemoveCustomerAddress$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return removeCustomerAddress(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeCustomerAddress$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeCustomerAddress(params: RemoveCustomerAddress$Params, context?: HttpContext): Observable<{
}> {
    return this.removeCustomerAddress$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
