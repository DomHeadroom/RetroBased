/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getOrder } from '../fn/order-controller/get-order';
import { GetOrder$Params } from '../fn/order-controller/get-order';
import { getProductsFromOrder } from '../fn/order-controller/get-products-from-order';
import { GetProductsFromOrder$Params } from '../fn/order-controller/get-products-from-order';
import { makeOrder } from '../fn/order-controller/make-order';
import { MakeOrder$Params } from '../fn/order-controller/make-order';

@Injectable({ providedIn: 'root' })
export class OrderControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getOrder()` */
  static readonly GetOrderPath = '/orders';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOrder()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrder$Response(params?: GetOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOrder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrder(params?: GetOrder$Params, context?: HttpContext): Observable<{
}> {
    return this.getOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `makeOrder()` */
  static readonly MakeOrderPath = '/orders';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `makeOrder()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  makeOrder$Response(params: MakeOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return makeOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `makeOrder$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  makeOrder(params: MakeOrder$Params, context?: HttpContext): Observable<{
}> {
    return this.makeOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getProductsFromOrder()` */
  static readonly GetProductsFromOrderPath = '/orders/{order}/products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProductsFromOrder()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductsFromOrder$Response(params: GetProductsFromOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getProductsFromOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProductsFromOrder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductsFromOrder(params: GetProductsFromOrder$Params, context?: HttpContext): Observable<{
}> {
    return this.getProductsFromOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
