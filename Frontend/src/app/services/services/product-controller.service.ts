/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addProduct } from '../fn/product-controller/add-product';
import { AddProduct$Params } from '../fn/product-controller/add-product';
import { getProduct } from '../fn/product-controller/get-product';
import { GetProduct$Params } from '../fn/product-controller/get-product';
import { getRandomProducts } from '../fn/product-controller/get-random-products';
import { GetRandomProducts$Params } from '../fn/product-controller/get-random-products';
import { removeProduct } from '../fn/product-controller/remove-product';
import { RemoveProduct$Params } from '../fn/product-controller/remove-product';
import { searchProducts } from '../fn/product-controller/search-products';
import { SearchProducts$Params } from '../fn/product-controller/search-products';

@Injectable({ providedIn: 'root' })
export class ProductControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addProduct()` */
  static readonly AddProductPath = '/product';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addProduct()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProduct$Response(params: AddProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addProduct$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProduct(params: AddProduct$Params, context?: HttpContext): Observable<{
}> {
    return this.addProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `removeProduct()` */
  static readonly RemoveProductPath = '/product';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeProduct()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeProduct$Response(params: RemoveProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return removeProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeProduct$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeProduct(params: RemoveProduct$Params, context?: HttpContext): Observable<{
}> {
    return this.removeProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `searchProducts()` */
  static readonly SearchProductsPath = '/product/public';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchProducts$Response(params: SearchProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return searchProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchProducts(params: SearchProducts$Params, context?: HttpContext): Observable<{
}> {
    return this.searchProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getProduct()` */
  static readonly GetProductPath = '/product/public/{productId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProduct()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProduct$Response(params: GetProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProduct$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProduct(params: GetProduct$Params, context?: HttpContext): Observable<{
}> {
    return this.getProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getRandomProducts()` */
  static readonly GetRandomProductsPath = '/product/public/products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRandomProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRandomProducts$Response(params?: GetRandomProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getRandomProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRandomProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRandomProducts(params?: GetRandomProducts$Params, context?: HttpContext): Observable<{
}> {
    return this.getRandomProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
