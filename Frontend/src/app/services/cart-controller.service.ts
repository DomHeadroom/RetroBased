/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from './base-service';
import { ApiConfiguration } from './api-configuration';
import { StrictHttpResponse } from './strict-http-response';

import { addProductsToCart } from './fn/cart-controller/add-products-to-cart';
import { AddProductsToCart$Params } from './fn/cart-controller/add-products-to-cart';
import { getCartProducts } from './fn/cart-controller/get-cart-products';
import { GetCartProducts$Params } from './fn/cart-controller/get-cart-products';
import { updateCartItemQuantity } from './fn/cart-controller/update-cart-item-quantity';
import { UpdateCartItemQuantity$Params } from './fn/cart-controller/update-cart-item-quantity';

@Injectable({ providedIn: 'root' })
export class CartControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCartProducts()` */
  static readonly GetCartProductsPath = '/carts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCartProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCartProducts$Response(params?: GetCartProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getCartProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCartProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCartProducts(params?: GetCartProducts$Params, context?: HttpContext): Observable<{
}> {
    return this.getCartProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `addProductsToCart()` */
  static readonly AddProductsToCartPath = '/carts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addProductsToCart()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProductsToCart$Response(params: AddProductsToCart$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addProductsToCart(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addProductsToCart$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProductsToCart(params: AddProductsToCart$Params, context?: HttpContext): Observable<{
}> {
    return this.addProductsToCart$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateCartItemQuantity()` */
  static readonly UpdateCartItemQuantityPath = '/carts/{productId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCartItemQuantity()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateCartItemQuantity$Response(params: UpdateCartItemQuantity$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateCartItemQuantity(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCartItemQuantity$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateCartItemQuantity(params: UpdateCartItemQuantity$Params, context?: HttpContext): Observable<{
}> {
    return this.updateCartItemQuantity$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
